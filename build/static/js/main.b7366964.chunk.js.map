{"version":3,"sources":["components/Cart/Checkout.module.css","components/Cart/Cart.module.css","components/Cart/CartItem.module.css","components/Layout/HeaderCartButton.module.css","components/UI/Modal.module.css","components/Meals/MealItem/MealItem.module.css","components/Meals/AvailableMeals.module.css","components/Layout/Header.module.css","components/UI/Card.module.css","components/UI/Input.module.css","components/Meals/MealItem/MealItemForm.module.css","components/Meals/MealsSummary.module.css","components/UI/Modal.jsx","components/Cart/CartItem.jsx","Context/Cart-context.jsx","components/Cart/Checkout.jsx","components/Cart/Cart.jsx","components/Cart/CartIcon.jsx","components/Layout/HeaderCartButton.jsx","components/assets/Indian.png","components/Layout/Header.jsx","components/UI/Card.jsx","components/UI/Input.jsx","components/Meals/MealItem/MealItemForm.jsx","components/Meals/MealItem/MealItem.jsx","components/Meals/AvailableMeals.jsx","components/Meals/MealsSummary.jsx","components/Meals/Meals.jsx","Context/CartProvider.jsx","App.js","index.js"],"names":["module","exports","Backdrop","props","className","classes","backdrop","onClick","onClose","ModalOverlay","modal","content","children","portalElement","document","getElementById","Modal","ReactDOM","createPortal","CartItem","price","toFixed","name","summary","amount","actions","onRemove","onAdd","CartContext","React","createContext","items","totalAmount","addItem","item","removeItem","id","clearCart","isEmpty","value","trim","Checkout","useState","address","city","pin","formInputsValidity","setFormInputsValidity","nameInputRef","useRef","addressInputRef","pinInputRef","cityInputRef","form","onSubmit","event","preventDefault","enteredName","current","enteredAddress","enteredPin","enteredCity","enteredNameIsValid","enteredAddIsValid","enteredPinIsValid","length","enteredCityIsValid","onConfirm","control","invalid","htmlFor","type","ref","onCancel","submit","Cart","isCheckout","setIsCheckout","isSubmit","setIsSubmit","didSubmit","setDidSubmit","cartCtx","useContext","hasItems","cartItemRemoveHandler","cartItemAddHandler","submitOrderHandler","userData","fetch","method","body","JSON","stringify","user","orderedItems","cartItems","map","bind","orderCloseAction","button","cartModalContent","Fragment","total","isSubmittingModalContent","didSubmitModalContent","CartIcon","xmlns","viewBox","fill","d","HeaderCartButton","btnIsHighlighted","setBtnIsHighlighted","numberOfCartItems","reduce","currNumber","btnClasses","bump","useEffect","timer","setTimeout","clearTimeout","icon","badge","Header","header","onShowCart","src","mealsImage","alt","Card","card","Input","forwardRef","input","label","MealItemForm","amountIsValid","setAmountIsValid","amountInputRef","enteredAmount","enteredAmountNumber","onAddToCart","min","max","step","defaultValue","MealItem","meal","description","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","ok","Error","json","key","responseData","loadedMeals","push","catch","error","message","MealsLoading","MealsError","mealsList","MealsSummary","defaultCartState","cartReducer","state","action","updatedItems","updatedTotalAmount","existingCartItemIndex","findIndex","existingCartItem","updatedItem","concat","existingItem","filter","CartProvider","useReducer","cartState","dispatchCartAction","cartContext","Provider","App","cartIsShown","setCartIsShown","Meals","createRoot","render"],"mappings":"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","file":"static/js/main.b7366964.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Checkout_form__cHT4A\",\"control\":\"Checkout_control__v_k-_\",\"actions\":\"Checkout_actions__2pSxR\",\"submit\":\"Checkout_submit__3Zlhe\",\"invalid\":\"Checkout_invalid__1i-8T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cart-items\":\"Cart_cart-items__8_M7Z\",\"total\":\"Cart_total__2zBaQ\",\"actions\":\"Cart_actions__2PHm0\",\"button--alt\":\"Cart_button--alt__2hOmH\",\"button\":\"Cart_button__3XBGq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cart-item\":\"CartItem_cart-item__3zMpB\",\"summary\":\"CartItem_summary__2u9Eb\",\"price\":\"CartItem_price___ycmL\",\"amount\":\"CartItem_amount__1oNJ2\",\"actions\":\"CartItem_actions__19AUM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"HeaderCartButton_button__28rGp\",\"icon\":\"HeaderCartButton_icon__150U3\",\"badge\":\"HeaderCartButton_badge__3saRc\",\"bump\":\"HeaderCartButton_bump__29s0P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__dzQ2A\",\"modal\":\"Modal_modal__2gst5\",\"slide-down\":\"Modal_slide-down__2ETqZ\",\"content\":\"Modal_content__b4Jg1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"meal\":\"MealItem_meal__G2F8y\",\"description\":\"MealItem_description__1QMdJ\",\"price\":\"MealItem_price__GJtbd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"meals\":\"AvailableMeals_meals__15f43\",\"meals-appear\":\"AvailableMeals_meals-appear__3wcT4\",\"MealsLoading\":\"AvailableMeals_MealsLoading__6p36J\",\"MealsError\":\"AvailableMeals_MealsError__11Ynh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1jF_R\",\"main-image\":\"Header_main-image__19L3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3nz_G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__2vfZe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"MealItemForm_form__3ofzK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"summary\":\"MealsSummary_summary__2PR9V\"};","import { Fragment } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport classes from \"./Modal.module.css\";\r\n\r\nconst Backdrop = (props) => {\r\n  return <div className={classes.backdrop} onClick={props.onClose} />;\r\n};\r\n\r\nconst ModalOverlay = (props) => {\r\n  return (\r\n    <div className={classes.modal}>\r\n      <div className={classes.content}>{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst portalElement = document.getElementById(\"overlays\");\r\n\r\nfunction Modal(props) {\r\n  //CREATING PORTALS\r\n  //Why are portals used in React?\r\n  // React portals provide a first-class way to render and allow child components,\r\n  // which are typically present outside the DOM, to live within a Document Object Model (DOM) node.\r\n  //GO TO INDEX.HTML FILE AND SEE THE DIV HAVING THE ID OVERLAYS WHICH TELLS US WHERE TO PORTAL IT\r\n  return (\r\n    <Fragment>\r\n      {ReactDOM.createPortal(\r\n        <Backdrop onClose={props.onClose} />,\r\n        portalElement\r\n      )}\r\n      {ReactDOM.createPortal(\r\n        <ModalOverlay>{props.children}</ModalOverlay>,\r\n        portalElement\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\nexport default Modal;\r\n","import classes from './CartItem.module.css';\n\nconst CartItem = (props) => {\n  const price = `₹${props.price.toFixed(2)}`;\n\n  return (\n    <li className={classes['cart-item']}>\n      <div>\n        <h2>{props.name}</h2>\n        <div className={classes.summary}>\n          <span className={classes.price}>{price}</span>\n          <span className={classes.amount}>x {props.amount}</span>\n        </div>\n      </div>\n      <div className={classes.actions}>\n        <button onClick={props.onRemove}>-</button>\n        <button onClick={props.onAdd}>+</button>\n      </div>\n    </li>\n  );\n};\n\nexport default CartItem;\n","import React from \"react\";\r\n// Context provides a way to pass data through the component tree without having to pass props down manually at every level.\r\nconst CartContext = React.createContext({\r\n  items: [],\r\n  totalAmount: 0,\r\n  //it will receive the item that should be added\r\n  addItem: (item) => {},\r\n  //it receives an id of the item which should be removed from the cart\r\n  removeItem: (id) => {},\r\n  clearCart: () => {},\r\n});\r\nexport default CartContext;\r\n","import { useRef, useState } from \"react\";\r\nimport classes from \"./Checkout.module.css\";\r\n\r\nconst isEmpty = (value) => value.trim() === \"\";\r\nconst isSixDigPin = (value) => value.trim().length !== 6;\r\n\r\nconst Checkout = (props) => {\r\n  const [formInputsValidity, setFormInputsValidity] = useState({\r\n    name: true,\r\n    address: true,\r\n    city: true,\r\n    pin: true,\r\n  });\r\n  //For checking the validation of the form at the end all at once\r\n  const nameInputRef = useRef();\r\n  const addressInputRef = useRef();\r\n  const pinInputRef = useRef();\r\n  const cityInputRef = useRef();\r\n\r\n  const confirmHandler = (event) => {\r\n    event.preventDefault();\r\n    //current gives us the access to the actual value stored in the ref\r\n    const enteredName = nameInputRef.current.value;\r\n    const enteredAddress = addressInputRef.current.value;\r\n    const enteredPin = pinInputRef.current.value;\r\n    const enteredCity = cityInputRef.current.value;\r\n\r\n    //its valid if the isEmpty is not empty\r\n    const enteredNameIsValid = !isEmpty(enteredName);\r\n    const enteredAddIsValid = !isEmpty(enteredAddress);\r\n    const enteredPinIsValid = !isSixDigPin(enteredPin);\r\n    const enteredCityIsValid = !isEmpty(enteredCity);\r\n\r\n    setFormInputsValidity({\r\n      name: enteredNameIsValid,\r\n      address: enteredAddIsValid,\r\n      city: enteredCityIsValid,\r\n      pin: enteredPinIsValid,\r\n    });\r\n    const formIsValid =\r\n      enteredNameIsValid &&\r\n      enteredAddIsValid &&\r\n      enteredCityIsValid &&\r\n      enteredPinIsValid;\r\n\r\n    //STOP IF THE FORM IS INVALID\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n\r\n    //WE WILL CHECK THE DATA IN FIREBASE AS WELL BECAUSE WE CANNOT TRUST USER DATA\r\n    //THIS IS HOW WE SEND THE DATA FROM CHECKOUT COMPONENT TO CART COMPONENT\r\n    props.onConfirm({\r\n      name: enteredName,\r\n      address: enteredAddress,\r\n      pin: enteredPin,\r\n      city: enteredCity,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={confirmHandler}>\r\n      <div\r\n        className={`${classes.control} ${\r\n          formInputsValidity.name ? \" \" : classes.invalid\r\n        }`}\r\n      >\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input type=\"text\" id=\"name\" ref={nameInputRef} />\r\n        {!formInputsValidity.name && <p>Enter a valid Name!</p>}\r\n      </div>\r\n\r\n      <div\r\n        className={`${classes.control} ${\r\n          formInputsValidity.address ? \" \" : classes.invalid\r\n        }`}\r\n      >\r\n        <label htmlFor=\"address\">Address</label>\r\n        <input type=\"text\" id=\"address\" ref={addressInputRef} />\r\n        {!formInputsValidity.address && <p>Enter a valid Address!</p>}\r\n      </div>\r\n\r\n      <div\r\n        className={`${classes.control} ${\r\n          formInputsValidity.pin ? \" \" : classes.invalid\r\n        }`}\r\n      >\r\n        <label htmlFor=\"pincode\">Pincode</label>\r\n        <input type=\"text\" id=\"pincode\" ref={pinInputRef} />\r\n        {!formInputsValidity.pin && <p>Enter a valid Pincode(6 digits!)</p>}\r\n      </div>\r\n\r\n      <div\r\n        className={`${classes.control} ${\r\n          formInputsValidity.name ? \" \" : classes.invalid\r\n        }`}\r\n      >\r\n        <label htmlFor=\"city\">City</label>\r\n        <input type=\"text\" id=\"city\" ref={cityInputRef} />\r\n        {!formInputsValidity.city && <p>Enter a valid city!</p>}\r\n      </div>\r\n\r\n      <div className={classes.actions}>\r\n        <button type=\"button\" onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button className={classes.submit}>Confirm</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n","import { useContext, useState } from \"react\";\r\n\r\nimport Modal from \"../UI/Modal\";\r\nimport CartItem from \"./CartItem\";\r\nimport classes from \"./Cart.module.css\";\r\nimport CartContext from \"../../Context/Cart-context\";\r\nimport Checkout from \"./Checkout\";\r\nimport React from \"react\";\r\n\r\nconst Cart = (props) => {\r\n  const [isCheckout, setIsCheckout] = useState(false);\r\n  //submission state\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  //After submit check state\r\n  const [didSubmit, setDidSubmit] = useState(false);\r\n\r\n  const cartCtx = useContext(CartContext);\r\n  //this will prevent the hard coding down there and we can use this constant now\r\n  const totalAmount = `₹${cartCtx.totalAmount.toFixed(2)}`;\r\n\r\n  //to show order button only when we have some items in cart\r\n  const hasItems = cartCtx.items.length > 0;\r\n\r\n  function cartItemRemoveHandler(id) {\r\n    cartCtx.removeItem(id);\r\n  }\r\n\r\n  function cartItemAddHandler(item) {\r\n    cartCtx.addItem({ ...item, amount: 1 });\r\n  }\r\n\r\n  function orderHandler() {\r\n    setIsCheckout(true);\r\n  }\r\n\r\n  const submitOrderHandler = async (userData) => {\r\n    setIsSubmit(true);\r\n    await fetch(\r\n      \"https://freshmeals-project-default-rtdb.firebaseio.com/orders.json\",\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          user: userData,\r\n          orderedItems: cartCtx.items,\r\n        }),\r\n      }\r\n    );\r\n    setIsSubmit(false);\r\n    setDidSubmit(true);\r\n    cartCtx.clearCart();\r\n  };\r\n\r\n  const cartItems = (\r\n    <ul className={classes[\"cart-items\"]}>\r\n      {cartCtx.items.map((item) => (\r\n        //key is provided to list everytime since its a list component\r\n        <CartItem\r\n          key={item.id}\r\n          name={item.name}\r\n          amount={item.amount}\r\n          price={item.price}\r\n          //bind ensures that the id of the removed item is passed here to cartItemRemoveHandler\r\n          onRemove={cartItemRemoveHandler.bind(null, item.id)}\r\n          onAdd={cartItemAddHandler.bind(null, item)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\n  const orderCloseAction = (\r\n    <div className={classes.actions}>\r\n      <button className={classes[\"button--alt\"]} onClick={props.onClose}>\r\n        Close\r\n      </button>\r\n      {hasItems && (\r\n        <button className={classes.button} onClick={orderHandler}>\r\n          Order\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const cartModalContent = (\r\n    //Sibling JSX code is not allowed\r\n    <React.Fragment>\r\n      {cartItems}\r\n      <div className={classes.total}>\r\n        <span>Total Amount</span>\r\n        <span>{totalAmount}</span>\r\n      </div>\r\n      {/* when isCheckout is true then only we need to show the form */}\r\n      {isCheckout && (\r\n        <Checkout onConfirm={submitOrderHandler} onCancel={props.onClose} />\r\n      )}\r\n      {/* When there is no Checkout we have the order close buttons */}\r\n      {!isCheckout && orderCloseAction}\r\n    </React.Fragment>\r\n  );\r\n\r\n  const isSubmittingModalContent = <p>Sending order data..</p>;\r\n\r\n  const didSubmitModalContent = (\r\n    <React.Fragment>\r\n      <p>SUCCESS! Order Placed..</p>\r\n      <div className={classes.actions}>\r\n        <button className={classes.button} onClick={props.onClose}>\r\n          Close\r\n        </button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <Modal onClose={props.onClose}>\r\n      {/* if we didnt submit show modal content */}\r\n      {!isSubmit && !didSubmit && cartModalContent}\r\n      {/* if we have submitted show the submitting message */}\r\n      {isSubmit && isSubmittingModalContent}\r\n      {/* and we have submitted the data, then show other message */}\r\n      {!isSubmit && didSubmit && didSubmitModalContent}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","const CartIcon = () => {\r\n  return (\r\n    //SVG is a vector graphics image format based on XML. SVG stands for Scalable Vector Graphics.\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 20 20\"\r\n      fill=\"currentColor\"\r\n    >\r\n      <path d=\"M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default CartIcon;\r\n","import { useContext, useEffect, useState } from \"react\";\r\n\r\nimport CartIcon from \"../Cart/CartIcon\";\r\nimport CartContext from \"../../Context/Cart-context\";\r\nimport classes from \"./HeaderCartButton.module.css\";\r\n\r\n//using the useContext here the HeaderCartButton Component will be re-evaluated by React whenever the context changes.\r\n//and it will be updated in the CartProvider component\r\nfunction HeaderCartButton(props) {\r\n  const [btnIsHighlighted, setBtnIsHighlighted] = useState(false);\r\n  const cartCtx = useContext(CartContext);\r\n\r\n  //we used object destructuring here because if down there we used cartCtx.items.length === 0 and used cartCtx as a\r\n  //dependency then everytime cartCtx changes useEffect is invoked but we only want that if the items changed so we used\r\n  //Object Destructuring..\r\n  const { items } = cartCtx;\r\n\r\n  //reduce method transforms the array of data into a single value(number)\r\n  //takes 2 parameters, first is the function and second is a starting value\r\n  //items is the value in the context object(an array)\r\n  //HERE ALSO OBJECT DESTRUCTURING USED INSTEAD OF cartCtx.items WE JUST USED items\r\n  const numberOfCartItems = items.reduce((currNumber, item) => {\r\n    //at first the value will be 0 but after that it will run this expression\r\n    return currNumber + item.amount;\r\n  }, 0);\r\n\r\n  //for the header cart button bumping animation\r\n  const btnClasses = `${classes.button} ${\r\n    btnIsHighlighted ? classes.bump : \" \"\r\n  }`;\r\n\r\n  useEffect(() => {\r\n    if (items.length === 0) {\r\n      return;\r\n    }\r\n    setBtnIsHighlighted(true);\r\n\r\n    const timer = setTimeout(() => {\r\n      setBtnIsHighlighted(false);\r\n    }, 200);\r\n    //CLEANUP FUNCTION FOR CLEARING THE TIMER, USE THIS EVERYTIME YOU USE A TIMER\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [items]);\r\n\r\n  return (\r\n    <button className={btnClasses} onClick={props.onClick}>\r\n      <span className={classes.icon}>\r\n        <CartIcon />\r\n      </span>\r\n      <span>My Cart</span>\r\n      <span className={classes.badge}>{numberOfCartItems}</span>\r\n    </button>\r\n  );\r\n}\r\nexport default HeaderCartButton;\r\n","export default __webpack_public_path__ + \"static/media/Indian.5269b57f.png\";","import { Fragment } from \"react\";\r\n\r\nimport HeaderCartButton from \"./HeaderCartButton\";\r\nimport mealsImage from \"../assets/Indian.png\";\r\nimport classes from \"./Header.module.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <Fragment>\r\n      <header className={classes.header}>\r\n        <h1>FreshMeals</h1>\r\n        <HeaderCartButton onClick={props.onShowCart} />\r\n      </header>\r\n\r\n      {/* The css class has - with it so cant use the dot notation */}\r\n      <div className={classes[\"main-image\"]}>\r\n        <img src={mealsImage} alt=\"Table of delicious food\" />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\nexport default Header;\r\n","import classes from \"./Card.module.css\";\r\n\r\nconst Card = (props) => {\r\n  return <div className={classes.card}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Input.module.css\";\r\n\r\n/* This ref is the forwarded ref which we set in the input.jsx component\r\n      we cannot add ref directly in the custom component so we need to pass it like this */\r\n\r\nconst Input = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div className={classes.input}>\r\n      <label htmlFor={props.input.id}>{props.label}</label>\r\n      {/* this spread operator part ensures that all the key value pairs in this input object which we receive on this\r\n      props input are added as props to input\r\n      so for eg:- if input object has {type: \"text\"} then this code will make sure that type:\"text\" is added */}\r\n\r\n      {/* This ref is the forwarded ref which we set in the input.jsx component\r\n      we cannot add ref directly in the custom component so we need to pass it like this */}\r\n      <input ref={ref} {...props.input} />\r\n    </div>\r\n  );\r\n});\r\nexport default Input;\r\n","import { useRef, useState } from \"react\";\r\n\r\nimport Input from \"../../UI/Input\";\r\nimport classes from \"./MealItemForm.module.css\";\r\n\r\nfunction MealItemForm(props) {\r\n  const [amountIsValid, setAmountIsValid] = useState(true);\r\n  // The useRef Hook allows you to persist values between renders.\r\n  // useRef() only returns one item. It returns an Object called current.\r\n\r\n  // When we initialize useRef we set the initial value: useRef(0).\r\n  const amountInputRef = useRef();\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n    //current is used with ref so amountInputRef.current will point at the <Input /> element and will look at\r\n    //the ref={} stored\r\n    //now, this value is always a string\r\n    const enteredAmount = amountInputRef.current.value;\r\n    //this will convert it to a number\r\n    const enteredAmountNumber = +enteredAmount;\r\n\r\n    if (\r\n      enteredAmount.trim().length === 0 ||\r\n      enteredAmountNumber < 1 ||\r\n      enteredAmountNumber > 5\r\n    ) {\r\n      setAmountIsValid(false);\r\n      //stop there dont continue if these conditions are met\r\n      return;\r\n    }\r\n\r\n    props.onAddToCart(enteredAmountNumber);\r\n  }\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={submitHandler}>\r\n      <Input\r\n        ref={amountInputRef}\r\n        label=\"Amount\"\r\n        input={{\r\n          // use that to create a unique id per <Input />:\r\n          id: \"amount_\" + props.id,\r\n          type: \"number\",\r\n          min: \"1\",\r\n          max: \"5\",\r\n          step: \"1\",\r\n          defaultValue: \"1\",\r\n        }}\r\n      />\r\n      <button>+ ADD</button>\r\n      {/* Error Message if the if() condition above is not met and setAmountIsValid(false) */}\r\n      {!amountIsValid && <p>Oops! Please enter a valid amount(1-5)</p>}\r\n    </form>\r\n  );\r\n}\r\nexport default MealItemForm;\r\n","import { useContext } from \"react\";\r\n\r\nimport MealItemForm from \"./MealItemForm\";\r\nimport classes from \"./MealItem.module.css\";\r\nimport CartContext from \"../../../Context/Cart-context\";\r\n\r\nfunction MealItem(props) {\r\n  const cartCtx = useContext(CartContext);\r\n  //$ sign and next one is for dynamic content\r\n  //toFixed tells the no. of places after deciaml point you have to use\r\n  const price = `₹${props.price.toFixed(2)}`;\r\n\r\n  function addToCartHandler(amount) {\r\n    cartCtx.addItem({\r\n      id: props.id,\r\n      name: props.name,\r\n      amount: amount,\r\n      price: props.price,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <li className={classes.meal}>\r\n      <div>\r\n        <h3>{props.name}</h3>\r\n        <div className={classes.description}>{props.description}</div>\r\n        <div className={classes.price}>{price}</div>\r\n      </div>\r\n      <div>\r\n        {/* use that to create a unique id per <Input />: */}\r\n        <MealItemForm id={props.id} onAddToCart={addToCartHandler} />\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\nexport default MealItem;\r\n","import Card from \"../UI/Card\";\r\nimport MealItem from \"./MealItem/MealItem\";\r\nimport classes from \"./AvailableMeals.module.css\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n//we mapped it to convert the array of javascript elements to jsx elements\r\nfunction AvailableMeals() {\r\n  //BECAUSSE OF ASYNCHRONOUS DATA WHICH IS WHY WE SUE ASYNC/AWAIT IT WILL RENDER FOR\r\n  //THE FIRST TIME BUT IT WILL BE EMPTY BUT AFTER THAT IT WILL UPDATE ITSELF WITH SOME\r\n  //DATA SO IT WILL RE-RENDER WITH THE UPDATED COMPONENT SO WE NEED A STATE FOR THI\r\n  const [meals, setMeals] = useState([]);\r\n  //For loading text on screen\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  //For any errors on screen\r\n  const [httpError, setHttpError] = useState();\r\n  //async is not allowed directly with useEffect so we will create a function\r\n  //inside useEffect\r\n  useEffect(() => {\r\n    //fetchMeals IS AN ASYNC FUNCTION AND IT ALWASY RETURNS A PROMISE\r\n    //THAT IS WHY WE USE THE AWAIT KEYWORD\r\n    // Asynchronous code runs in parallel.Synchronous code runs in sequence one after another\r\n    //What is promise used for?\r\n    // Promises are used to handle asynchronous operations in JavaScript.\r\n    const fetchMeals = async () => {\r\n      //we can get a response here for fetching our meals\r\n      const response = await fetch(\r\n        \"https://freshmeals-project-default-rtdb.firebaseio.com/meals.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      //we use async await because it returns a promise\r\n      const responseData = await response.json();\r\n      //Firebase returns it in a object so we have to create a key value pair\r\n      //where keys are the meals m1, m2 etc. and the value are the nested objects\r\n      //with the description and all..\r\n      //we have to return that like this everytime in any project\r\n      const loadedMeals = [];\r\n      for (const key in responseData) {\r\n        loadedMeals.push({\r\n          //we have an id field because in our meals data we have the id field\r\n          id: key, //keys are the id's\r\n          //response data for the given key in which we have a name field(check firebase)\r\n          name: responseData[key].name,\r\n          description: responseData[key].description,\r\n          price: responseData[key].price,\r\n        });\r\n      }\r\n      //after first time we will update it with some loaded meals and re-render it\r\n      setMeals(loadedMeals);\r\n      setIsLoading(false);\r\n    };\r\n    //Handling an error inside of a promise\r\n    fetchMeals().catch((error) => {\r\n      setIsLoading(false);\r\n      setHttpError(error.message);\r\n    });\r\n    // try {\r\n    //   fetchMeals().then().catch();\r\n    // } catch(error) {\r\n    //   setIsLoading(false);\r\n    //   setHttpError(error.message);\r\n    // }\r\n  }, []);\r\n\r\n  //if we are loading so it will show us this..\r\n  if (isLoading) {\r\n    return (\r\n      <section className={classes.MealsLoading}>\r\n        <p>Loading...</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  if (httpError) {\r\n    return (\r\n      <section className={classes.MealsError}>\r\n        <p>{httpError}</p>\r\n      </section>\r\n    );\r\n  }\r\n  //meals is the updated state\r\n  const mealsList = meals.map((meal) => (\r\n    <MealItem\r\n      key={meal.id}\r\n      id={meal.id}\r\n      name={meal.name}\r\n      description={meal.description}\r\n      price={meal.price}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <section className={classes.meals}>\r\n      <Card>\r\n        <ul>{mealsList}</ul>\r\n      </Card>\r\n    </section>\r\n  );\r\n}\r\nexport default AvailableMeals;\r\n","import classes from './MealsSummary.module.css';\r\n\r\nconst MealsSummary = () => {\r\n  return (\r\n    <section className={classes.summary}>\r\n      <h2>Delicious Food, Delivered To You</h2>\r\n      <p>\r\n        Choose your favorite meal from our broad selection of available meals\r\n        and enjoy a delicious lunch or dinner at home.\r\n      </p>\r\n      <p>\r\n        All our meals are cooked with high-quality ingredients, just-in-time and\r\n        of course by experienced chefs!\r\n      </p>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default MealsSummary;","import { Fragment } from \"react\";\r\nimport AvailableMeals from \"./AvailableMeals\";\r\nimport MealsSummary from \"./MealsSummary\";\r\n\r\nfunction meals() {\r\n  return (\r\n    <Fragment>\r\n      <MealsSummary />\r\n      <AvailableMeals />\r\n    </Fragment>\r\n  );\r\n}\r\nexport default meals;\r\n","//Will manage CartContext data and provide that context to all the components that want access on it.\r\nimport { useReducer } from \"react\";\r\nimport CartContext from \"./Cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\n//outside the component function because we dont need any data from the component or the surroundings\r\nfunction cartReducer(state, action) {\r\n  if (action.type === \"ADD_ITEM\") {\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n    //checking if the item is already part of the cart\r\n    //findIndex() finds the index of the item in an array\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      //if the item we are adding has the same id with the item that we have added previously\r\n      //will return index only\r\n      (item) => item.id === action.item.id\r\n    );\r\n    //will get the item at that particular index\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n\r\n    let updatedItems;\r\n\r\n    if (existingCartItem) {\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        //it will recalculate the amount(existing item + added item)\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n\r\n      updatedItems = [...state.items];\r\n      //pick the old item and override it with this updated item\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"REMOVE_ITEM\") {\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      //here it is only action.id not action.item.id because we are returning id in this action\r\n      //will return index only\r\n      (item) => item.id === action.id\r\n    );\r\n    const existingItem = state.items[existingCartItemIndex];\r\n    //decreasing amount and price\r\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n    let updatedItems;\r\n    //if there is ony one item left so remove the item completely from the array\r\n    if (existingItem.amount === 1) {\r\n      //filter() returns a new array which is filtered by applying some conditions and we pass a func to filter\r\n      //that is executed in every item of array and that func receives the item and if we return true we keep the item\r\n      //if we return false we get rid of it.\r\n      //here all items whose id is not equal to that particular id selected are kept\r\n      updatedItems = state.items.filter((item) => item.id !== action.id);\r\n    }\r\n    //or else if the item is more than 1 so decrease the amount of that item\r\n    else {\r\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n      updatedItems = [...state.items];\r\n      //so here we are just overwriting the deleted item and updating it\r\n      //that means if we have 2 chilly potatoes we delete one so it updates to 1 amount\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    }\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"CLEAR\") {\r\n    return defaultCartState;\r\n  }\r\n\r\n  return defaultCartState;\r\n}\r\n\r\nfunction CartProvider(props) {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n  function addItemToCartHandler(item) {\r\n    //this func can have anything like a number or a string but typically we use a object\r\n    dispatchCartAction({ type: \"ADD_ITEM\", item: item });\r\n  }\r\n\r\n  function removeItemFromCartHandler(id) {\r\n    dispatchCartAction({\r\n      type: \"REMOVE_ITEM\",\r\n      id: id,\r\n    });\r\n  }\r\n\r\n  function clearCartHandler() {\r\n    dispatchCartAction({ type: \"CLEAR\" });\r\n  }\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n    clearCart: clearCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\nexport default CartProvider;\r\n","import { useState } from \"react\";\nimport Cart from \"./components/Cart/Cart\";\nimport Header from \"./components/Layout/Header\";\nimport Meals from \"./components/Meals/Meals\";\nimport CartProvider from \"./Context/CartProvider\";\n\nfunction App() {\n  const [cartIsShown, setCartIsShown] = useState(false);\n\n  function showCartHandler() {\n    setCartIsShown(true);\n  }\n\n  function hideCartHandler() {\n    setCartIsShown(false);\n  }\n\n  return (\n    //Now this provider will be used as a wrapper so that we can get access to the main app component\n    <CartProvider>\n      {cartIsShown && <Cart onClose={hideCartHandler} />}\n      <Header onShowCart={showCartHandler} />\n      <main>\n        <Meals />\n      </main>\n    </CartProvider>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}